https://mrfu.me/2016/02/28/Glide_Series_Roundup/
Glide - 系列综述Glide — Series Roundup
Posted by MrFu on February 28, 2016

1、Glide 的一个优势：缓存
当你上下滚动很多次，你会看到图片显示的之前的快的多。在比较新的手机上，这甚至都不需要时间去等。你可以会猜测，这些图片可能是来自缓存，而不再是从网络中请求。Glide 的缓存实现是基于 Picasso，这对你来说会更加全面的而且做很多事情会更加容易。缓存实现的大小是依赖于设备的磁盘大小。

当加载图片时，Glide 使用3个来源：内存，磁盘和网络（从最快到最慢排序）。再说一次，这里你不需要做任何事情。Glide 帮你隐藏了所有复杂的情况，同时为你创建了一个智能的缓存大小。我们将在以后的博客中去了解这块缓存知识。

@Override public View getView(int position, View convertView, ViewGroup parent) {
if(null==convertView){
convertView=inflater.inflate(R.layout.listview_item_image,parent,false);
}
Glide.with(context)
.load(imageUrls[position])
.into((ImageView)convertView);
return convertView;
}

.skipMemoryCache(true) 去明确告诉 Glide 跳过内存缓存。这意味着 Glide 将不会把这张图片放到内存缓存中去。这里需要明白的是，这只是会影响内存缓存！Glide 将会仍然利用磁盘缓存来避免重复的网络请求。
对于相同的 URL ，如果你的初始请求没调用 .skipMemoryCache(true) 方法，你后来又调用了 .skipMemoryCache(true) 这个方法，这个资源将会在内存中获取缓存。当你想要去调整缓存行为时，确保对同一个资源调用的一致性。

.diskCacheStrategy( DiskCacheStrategy.NONE )跳过磁盘缓存
自定义磁盘缓存行为
Glide 有多个选项去配置磁盘缓存行为。在我们向你展示这些选项之前，你必须了解到 Glide 的磁盘缓存是相当复杂的。比如，Picasso 仅仅缓存了全尺寸的图像。然而 Glide 缓存了原始图像，全分辨率图像和另外小版本的图像。比如，如果你请求的一个图像是 1000x1000 像素的，但你的 ImageView 是 500x500 像素的，Glide 将会把这两个尺寸都进行缓存。

现在你将会理解对于 .diskCacheStrategy() 方法来说不同的枚举参数的意义：

	* DiskCacheStrategy.NONE 什么都不缓存，就像刚讨论的那样
	* DiskCacheStrategy.SOURCE 仅仅只缓存原来的全分辨率的图像。在我们上面的例子中，将会只有一个 1000x1000 像素的图片
	* DiskCacheStrategy.RESULT 仅仅缓存最终的图像，即，降低分辨率后的（或者是转换后的）
	* DiskCacheStrategy.ALL 缓存所有版本的图像（默认行为）

2、占位符

错误占位符：.error()
空占位符：.placeholder()
error()接受的参数只能是已经初始化的 drawable 对象或者指明它的资源(R.drawable.<drawable-keyword>)
Glide
    .with(context)
    .load("http://futurestud.io/non_existing_image.png")
    .placeholder(R.mipmap.ic_launcher) // can also be a drawable
    .error(R.mipmap.future_studio_launcher) // will be displayed if the image cannot be loaded
    .into(imageViewError);



3、显示动画

默认激活crossFade()
设置无动画dontAnimate()
.animate( android.R.anim.slide_in_left ) // or R.anim.zoom_in
自定义动画


4、图片重设大小 和 缩放
对于 Glide，如果图片不会自动适配到 ImageView，调用 override(horizontalSize, verticalSize) 。这将在图片显示到 ImageView之前重新改变图片大小
Glide
    .with(context)
    .load(UsageExampleListViewAdapter.eatFoodyImages[0])
    .override(600, 200) // resizes the image to these dimensions (in pixel). does not respect aspect ratio
    .into(imageViewResize);
CenterCrop()是一个裁剪技术，即缩放图像让它填充到 ImageView 界限内并且裁剪额外的部分。ImageView 可能会完全填充，但图像可能不会完整显示
fitCenter() 是裁剪技术，即缩放图像让图像都测量出来等于或小于 ImageView 的边界范围。该图像将会完全显示，但可能不会填满整个 ImageView

5、显示 Gif  & Gif 检查
现实GIF和普通加载图片一样。
引入了一个额外的防区强制 Glide变成一个 Gif asGif()。
如果这个 gifUrl 不是一个 Gif，Glide 将会把这个 load 当成失败处理。

仅仅想要显示 Gif 的第一帧，你可以调用 asBitmap() 去保证其作为一个常规的图片显示，即使这个 URL 是一个 Gif。

6、显示本地视频
现在来谈谈视频。Glide 还能显示视频！只要他们是存储在手机上的（本地视频!!!） 。让我们假设你通过让用户选择一个视频后得到了一个文件路径：
String filePath = "/storage/emulated/0/Pictures/example_video.mp4";Glide
    .with( context )
    .load( Uri.fromFile( new File( filePath ) ) )
    .into( imageViewGifAsBitmap );

7、请求优先级
调用 .priority() 方法

	* Priority.LOW
	* Priority.NORMAL
	* Priority.HIGH
	* Priority.IMMEDIATE
优先级并不是完全严格遵守的。Glide 将会用他们作为一个准则，并尽可能的处理这些请求，但是它不能保证所有的图片都会按照所要求的顺序加载。

8、缩略图
缩略图不同于之前博客提到的占位符。占位符必须附带应用程序捆绑的资源才行。缩略图是动态占位符。它也可以从网络中加载。
缩略图将会在实际请求加载完或者处理完之后才显示。
在原始图像到达之后，它不会取代原始图像。它只会被抹除。

提示：另外一个流畅加载图片过程的真的很棒的方式是用色彩图像占位符的图像背景的主色彩作为图像。我们也为此写了一个指南。

.thumbnail(0.1f)
你传了一个 0.1f 作为参数，Glide 将会显示原始图像的10%的大小。如果原始图像有 1000x1000 像素，那么缩略图将会有 100x100 像素。因为这个图像将会明显比 ImageView 小很多，你需要确保它的 ScaleType 的设置是正确的。

如果你已经在 ListView中显示了图像。这么说吧，在250x250 像素的中，图像将在详细视图中需要一个更大的分辨率图像。然而，从用户的角度来看，他已经看到较小版本的图像，为什么在详情页中出现一个占位符显示了几秒，然后相同图像又再次一次显示（高分辨率的）？

用完全不同的请求去进阶缩略图
然而用 float 参数来使用 .thumbnail() 是易于设置且非常有效，但它不总是有意义的。如果缩略图是要通过网络去加载相同的全分辨率的图像，则可能不会很快。所以，Glide 提供了另一个选项去加载和显示缩略图。
第二个选择是传一个完全新的 Glide 请求作为参数。让我们来看看实例：
private void loadImageThumbnailRequest() {
    // setup Glide request without the into() method
    DrawableRequestBuilder<String> thumbnailRequest = Glide
        .with( context )
        .load( eatFoodyImages[2] );

    // pass the request as a a parameter to the thumbnail request
    Glide
        .with( context )
        .load( UsageExampleGifAndVideos.gifUrl )
        .thumbnail( thumbnailRequest )
        .into( imageView3 );}
所不同的是，第一个缩略图请求是完全独立于第二个原始请求的。该缩略图可以是不同的资源或图片 URL，你可以为其应用不同的转换，等等。

9、Glide 中的回调：Targets
https://mrfu.me/2016/02/27/Glide_Callbacks_SimpleTarget_and_ViewTarget_for_Custom_View_Classes/

Gide.into(target)  此处target可以不是非要继承ImageView

private void loadImageViewTarget() {
    FutureStudioView customView = (FutureStudioView) findViewById( R.id.custom_view );

    viewTarget = new ViewTarget<FutureStudioView, GlideDrawable>( customView ) {
        @Override
        public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {
            this.view.setImage( resource.getCurrent() );
        }
    };

    Glide
        .with( context.getApplicationContext() ) // safer!
        .load( eatFoodyImages[2] )
        .into( viewTarget );}
在 target 回调方法中，我们使用我们创建的方法 setImage(Drawable drawable) 在自定义 view 类中去设置图片。另外确保你注意到我们必须在 ViewTarget 的构造函数中传递我们自定义 view 作为参数：new ViewTarget<FutureStudioView, GlideDrawable>(customView)。
这应该涵盖了所有你需要的自定义 view。你也可以在回调中添加额外的工作。如，我们可以分析传入的 Bitmap 的主要的颜色并设置十六进制值给 TextView。但我们相信你应该已经有一些想法了。
10、加载图片到 Notifications和应用小部件


11、常规异常日志记录
首先，创建一个监听作为一个字段对象去避免垃圾回收（注：之前说过不要用匿名内部类的形式）：
private RequestListener<String, GlideDrawable> requestListener = new RequestListener<String, GlideDrawable>() {
    @Override
    public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {
        // todo log exception

        // important to return false so the error placeholder can be placed
        return false;
    }

    @Override
    public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {
        return false;
    }};
.listener( requestListener ) .error( R.drawable.cupcake )
要使日志工作正常的话，.error() 并不是必须的。然而，如果你在监听的 onException 中返回 false 的话，
R.drawable.cupcake 只是显示出来而已。


12、集成网络栈，目前已实现OkHttp和Volley

13、用 GlideModule 修改 Glide

//自定义内存缓存
//自定义磁盘缓存  磁盘缓存也可以位于外部存储，公有目录
增加 Glide 的图片质量，
Glide 默认使用低质量的 RGB565


http://blog.csdn.net/hshshshshs1/article/details/50786203
